generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

enum AuthProvider {
  credentials
  google
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RateLimiterFlexible {
  key    String    @id @default(cuid())
  points Int
  expire DateTime?
}

model User {
  id             String         @id @default(cuid())
  fullName       String         @default("")
  role           String         @default("user") //user ,vendor,member,admin
  lastName       String         @default("")
  businessName   String?        @default("")
  businessType   String?        @default("")
  businessLegalStructure   String?        @default("")
  einNumber      String?        @default("")
  tinNumber      String?        @default("")
  contactPerson      String?        @default("")
  bankName       String?        @default("")
  accountNumber      String?        @default("")
  routingNumber      String?        @default("")
  bankAddress      String?        @default("")
  signatoryName      String?        @default("")
  signatureDate      String?        @default("")
  vendoraccepted       Boolean?        @default(false)
  address        String?
  phone          String?
  city           String?
  state          String?
  zipCode        String?
  country        String?
  email          String         @unique
  password       String?
  avatar         String?        @default("https://via.placeholder.com/70x70")
  OTP            String?        @unique
  OTP_EXPIRES_IN DateTime?
  isVerified     Boolean        @default(false)
  tokenVersion   Int            @default(0)
  customer_id String?   // optional
  vendorNic   String?              
  isCompleted  Boolean?         @default(false)
  authProvider   AuthProvider   @default(credentials)
  member         Member?
  donation       Donation?
  reviews        Review[]
  carts          Cart[]
  wishlists      Wishlist[]
  bookService    BookService[]
  interview      Interview?
  contactUs      ContactUs[]
  conference     Conference[]
  sufiChecklist  SufiChecklist?
  orderPlace Order[]
  digitalBoook DigitalBook[]
  music Music[]
  redemptions Coupon[]
  accessories Accessories[]
  fashion Fashion[]
  homeLiving HomeAndLiving[]
  decoration Decoration[]
  meditation Meditation[]
  createdAt      DateTime       @default(now())

  @@map("users")
}
model Order {
  id              Int          @id @default(autoincrement())
  userId          String
  amount          Float
  stripeSessionId String?
  fullName        String       @default("")
  country         String?      @default("")
  email           String?      @default("")
  sPaymentIntentId String?
  shippingAddress String       @default("")   
  zip             String       @default("")
  phone           String       @default("")
  status          OrderStatus  @default(PENDING)
  paymentStatus          PaymentStatus  @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  transactions Transaction[] // One order can have multiple payment attempts
  user    User        @relation(fields: [userId], references: [id])
  items   OrderItem[]

  @@map("orders")
}
// schema.prisma
model Transaction {
  id           Int        @id @default(autoincrement())
  orderId      Int
  amount       Float
  status       TransactionStatus
  paymentMethod String
  stripePaymentIntentId String?
  stripeClientSecret   String?
  gatewayData   Json?      // Raw response from Stripe
  order        Order?       @relation(fields: [orderId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([stripePaymentIntentId])
}

enum TransactionStatus {
  PENDING
  REQUIRES_ACTION
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}
enum ProductCategory {
  MUSIC
  DIGITAL_BOOK
  MEDITATION
  FASHION
  HOME_LIVING
  DECORATION
  ACCESSORIES
}

model OrderItem {
  id         Int             @id @default(autoincrement())
  orderId    Int
  category   ProductCategory
  productId  Int
  quantity   Int             @default(1)
  price      Float
  status          OrderStatus  @default(PENDING)//Delivery status of the item
  order Order @relation(fields: [orderId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?     @updatedAt
  @@map("order_items")
}

model Member {
  id      String   @id @default(cuid()) //Todo better to use id
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @unique
  phone   String?
  country String
  role    String[] //todo: add role 

  volunteerSupport     String[]         @default([""])
  previousVolunteerExp String?
  monthlyTime          String?
  volunteerMode        VolunteeringMode @default(IN_PERSON)

  donorType String[] @default([""])

  collaboratorIntent String[] @default([""])
  organization       String?
  intentCreation     String?

  additionalInfo     String?
  agreedToPrinciples Boolean  @default(false)
  consentedToUpdates Boolean  @default(false)
  createdAt          DateTime @default(now())

  @@map("members")
}

model Coupon {
  id         String   @id @default(cuid()) // unique coupon ID
  code       String   @unique              // coupon code, must be unique
  expiresAt  DateTime?                     // optional expiration date
  isActive   Boolean  @default(true)       // active/inactive flag
  createdAt  DateTime @default(now())      // timestamp of creation
  updatedAt  DateTime @updatedAt           // timestamp of last update
  price      Float    @default(0)                    // base price before discount ðŸ’°
  discount   Float     @default(0)        // discount as % or fixed amount
  // Relation with User (creator/owner of coupon)
  createdBy  String
  isPaid     Boolean  @default(false)
  user       User     @relation(fields: [createdBy], references: [id])

  @@map("coupons") // map to table name
}


model Donation {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @unique
  amount    String
  pool      TPOOL[]       @default([SUFI_SCIENCE_CENTER])
  donorType DONATION_TYPE @default(ONE_TIME)
  createdAt DateTime      @default(now())

  @@map("donations")
}

model Conference {
  id               Int               @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @unique
  institution      String?
  abstract         String
  presentationType PRESENTATION_TYPE @default(ORAL)
  topic            CONFERENCE_TYPE   @default(SUFI_PHILOSOPHY)
  status           Int               @default(0)
  createdAt        DateTime          @default(now())

  @@map("conferences")
}

enum CONFERENCE_TYPE {
  SUFI_PHILOSOPHY
  QUANTUM_CONSCIOUSNESS
  MYSTICAL_PRACTICES
  HEALING_TRANSITIONS
  INTER_APPROACHES
  OTHER
}

enum PRESENTATION_TYPE {
  ORAL
  POSTER
  WORKSHOP
  PANEL_DISCUSSION
}

enum VolunteeringMode {
  IN_PERSON
  REMOTE
  HYBRID
}

enum DONATION_TYPE {
  ONE_TIME
  MONTHLY
  GENERAL_DONATIONS
  SPONSORSHIP_DONATIONS
  PATRON_MEMBERSHIP_CONTRIBUTIONS
  EDUCATIONAL_SCHOLARSHIP_DONATIONS
  LEGACY_PLANNED_GIVING
  RECURRING
}

enum TPOOL {
  SUFI_SCIENCE_CENTER
  SPONSOR_SCHOLAR
  PRESERVE_ART_AND_CRAFT
  SPONSOR_EVENTS
}
// accesories done

model Accessories {
  id          Int        @id @default(autoincrement())
  stock       Int        @default(0)
  title       String
  name        String?
  color       String?
  care        String?
  material    String?
  shippingTime String?
  description String?
  price       Float
  tags        String[]   @default([])
  sku         String     @unique
  images      String[]   @default([])
  wishlist    Wishlist[]
  cart        Cart[]
  reviews     Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDelete    Boolean    @default(false)
  userId    String
  user        User        @relation(fields: [userId], references: [id])
  @@map("accessories")
}

model Decoration {
  id          Int        @id @default(autoincrement())
  stock       Int        @default(0)
  title       String
  name        String?
  color       String?
  care        String?
  material    String?
  shippingTime String?
  description String?
  price       Float
  tags        String[]   @default([])
  sku         String     @unique
  images      String[]   @default([])
  wishlist    Wishlist[]
  cart        Cart[]
  reviews     Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDelete    Boolean    @default(false)
  userId    String
  user        User        @relation(fields: [userId], references: [id])
  @@map("decorations")
}

model HomeAndLiving {
  id          Int        @id @default(autoincrement())
  stock       Int        @default(0)
  title       String
  name        String?
  color       String?
  care        String?
  material    String?
  shippingTime String?
  description String?
  price       Float
  tags        String[]   @default([])
  sku         String     @unique
  wishlist    Wishlist[]
  cart        Cart[]
  reviews     Review[]
  images      String[]   @default([])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDelete    Boolean    @default(false)
  userId    String
  user        User        @relation(fields: [userId], references: [id])
  @@map("homeAndLiving")
}

model Fashion {
  id          Int        @id @default(autoincrement())
  stock       Int        @default(0)
  title       String
  name        String?
  color       String?
  care        String?
  material    String?
  shippingTime String?
  description String?
  price       Float
  tags        String[]   @default([])
  sku         String     @unique
  images      String[]   @default([])
  wishlist    Wishlist[]
  cart        Cart[]
  reviews     Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDelete    Boolean    @default(false)
  userId    String
  user        User        @relation(fields: [userId], references: [id])
  @@map("fashion")
}

model Meditation {
  id          Int        @id @default(autoincrement())
  stock       Int        @default(0)
  title       String
  name        String?
  color       String?
  care        String?
  material    String?
  shippingTime String?
  description String?
  price       Float
  tags        String[]   @default([])
  sku         String     @unique
  images      String[]   @default([])
  wishlist    Wishlist[]
  cart        Cart[]
  reviews     Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDelete    Boolean    @default(false)
  userId    String
  user        User        @relation(fields: [userId], references: [id])
}

model DigitalBook {
  
  id             Int        @id @default(autoincrement())
  userId    String
  author         String?
  user        User        @relation(fields: [userId], references: [id])
  title         String    @default("")
  description         String    @default("")
  genre          String?
  releaseDate    DateTime?
  url            String?
  fileType       String?
  coverImage     String?
  price          Float     @default(0)
  overviewImages String[]  @default([])
  wishlist       Wishlist[]
  cart           Cart[]
  reviews        Review[]
  isAvailable    Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  isDelete       Boolean    @default(false)

  @@map("digitalBooks")
}
enum OrderStatus {
  PENDING
  DISPATCH
  COMPLETED
  FAILED
  CANCELLED
}
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}
model Music {
  id          Int        @id @default(autoincrement())
  title       String
  description       String
  artist      String?
  mp3Url      String?
  mp4Url      String?
  duration    Int?
  stock       Int        @default(0)
  price          Float     @default(0)
  reviews     Review[]
  wishlist    Wishlist[]
  cart        Cart[]
  isDelete    Boolean    @default(false)
  isAvailable Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId    String

  @@map("music")
}

// FIXED: Review model with optional relations
model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  content   String
  createdAt DateTime @default(now())

  // Optional foreign keys - only one should be filled at a time
  musicId Int?
  music   Music? @relation(fields: [musicId], references: [id], onDelete: Cascade)

  bookId      Int?
  digitalBook DigitalBook? @relation(fields: [bookId], references: [id], onDelete: Cascade)

  meditationId Int?
  meditation   Meditation? @relation(fields: [meditationId], references: [id], onDelete: Cascade)

  fashionId Int?
  fashion   Fashion? @relation(fields: [fashionId], references: [id], onDelete: Cascade)

  livingId Int?
  living   HomeAndLiving? @relation(fields: [livingId], references: [id], onDelete: Cascade)

  decorationId Int?
  decoration   Decoration? @relation(fields: [decorationId], references: [id], onDelete: Cascade)

  accessoriesId Int?
  accessories   Accessories? @relation(fields: [accessoriesId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// FIXED: Cart model with optional relations
model Cart {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  qty       Int      @default(1)
  createdAt DateTime @default(now())
  // Optional foreign keys - only one should be filled at a time
  musicId Int?
  music   Music? @relation(fields: [musicId], references: [id], onDelete: Cascade)

  bookId      Int?
  digitalBook DigitalBook? @relation(fields: [bookId], references: [id], onDelete: Cascade)

  meditationId Int?
  meditation   Meditation? @relation(fields: [meditationId], references: [id], onDelete: Cascade)

  fashionId Int?
  fashion   Fashion? @relation(fields: [fashionId], references: [id], onDelete: Cascade)

  livingId Int?
  living   HomeAndLiving? @relation(fields: [livingId], references: [id], onDelete: Cascade)

  decorationId Int?
  decoration   Decoration? @relation(fields: [decorationId], references: [id], onDelete: Cascade)

  accessoriesId Int?
  accessories   Accessories? @relation(fields: [accessoriesId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  // Optional foreign keys - only one should be filled at a time
  musicId Int?
  music   Music? @relation(fields: [musicId], references: [id], onDelete: Cascade)

  bookId      Int?
  digitalBook DigitalBook? @relation(fields: [bookId], references: [id], onDelete: Cascade)

  meditationId Int?
  meditation   Meditation? @relation(fields: [meditationId], references: [id], onDelete: Cascade)

  fashionId Int?
  fashion   Fashion? @relation(fields: [fashionId], references: [id], onDelete: Cascade)

  livingId Int?
  living   HomeAndLiving? @relation(fields: [livingId], references: [id], onDelete: Cascade)

  decorationId Int?
  decoration   Decoration? @relation(fields: [decorationId], references: [id], onDelete: Cascade)

  accessoriesId Int?
  accessories   Accessories? @relation(fields: [accessoriesId], references: [id], onDelete: Cascade)

  @@map("wishlists")
}

model BookService {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  subject   String
  date      String
  service   SERVICE_TYPE @default(ASSIST_WITH_SPRITUAL_PROGRAM)
  comment   String
  status    Int          @default(0) //pending =0,completed =1 ,cancel=2
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([userId])
  @@map("bookServices")
}

enum STATUS_TYPE {
  PENDING
  ACCEPTED
  REJECTED
}

enum SERVICE_TYPE {
  ASSIST_WITH_SPRITUAL_PROGRAM
  SUPPORT_CRAFT_CULTURE
  FUND_RAISING_EVENT_ORGANIZATION
  OUTREACH_COMMUNITY
  HELP_DIGITAL_MEDIA
  CREATE_SACRED_ART_HANDICRAFTS
}

model Interview {
  id                   Int                     @id @default(autoincrement())
  user                 User                    @relation(fields: [userId], references: [id])
  userId               String @unique
  acceptedByWho               String?    
  profession           String
  institution          String // Fixed typo from "institutional"
  website              String? // Made optional since not all may have a website
  areasOfImpact        IMPACT_TYPE[]           @default([SPRITUAL_LEADERSHIP])
  spiritualOrientation SPRITUAL_TYPE?
  publicVoice          Boolean
  interviewIntent      INTERVIEW_INTENT_TYPE[]
  status               Int                     @default(0) //pending =0,completed =1 ,cancel=2
  interviewTimeZone    INTERVIEW_TIME_ZONE?
  scheduledAt          DateTime
  additionalNotes      String? // Made optional
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt

  @@map("interviews")
}

model ContactUs {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  subject   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contactUs")
}

enum SPRITUAL_TYPE {
  SUFI
  FREETHINKER
  NOT_AFFLIATED
}

enum INTERVIEW_INTENT_TYPE {
  INSPIRING_OTHERS
  SHARE_KNOWLEDGE
  NETWORK
  PROMOTE_WORK
  DOCUMENT_EXPERIENCE
  SPIRITUAL_DIALOGUE
}

enum INTERVIEW_TIME_ZONE {
  MYSTIC
  SCIENTIFIC
  ACADEMIC
}

enum IMPACT_TYPE {
  SPRITUAL_LEADERSHIP
  INTEGRATIVE_HEALTH
  SCIENTIFIC_CONCIOUSNESS
  ECO_STEWARD
  POLICY_REFORM
  TRANS_EDUCATIVE
  ETHICAL_JUSTICE
  CULTURAL_EXPRESSION
  UNITY_DIALOGUE
  YOUTH_EMPOWERMENT
}

model SufiChecklist {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
  // status     String  @default("Threshold of the Path")  
  progress Int    @default(0) //in perc

  items     SufiChecklistItem[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("sufi_checklists")
}

model SufiChecklistItem {
  id          Int                 @id @default(autoincrement())
  checklist   SufiChecklist       @relation(fields: [checklistId], references: [id])
  checklistId Int
  section     ChecklistSection
  title       String
  status      ChecklistItemStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("sufi_checklist_items")
}

enum ChecklistSection {
  INITIAL_ORIENTATION
  FINDING_GUIDANCE
  PRACTICE_AND_DISCIPLINE
  COMMUNITY_ENGAGEMENT
  ADVANCED_STUDY
}

enum ChecklistItemStatus {
  PENDING
  COMPLETED
  SKIPPED
}

enum SUFI_PATH_STATUS {
  THRESHOLD
  EXPLORATION
  ADVANCING
  DEEPENING
}

enum CouponType {
PERCENT // e.g., 10% off
FIXED // e.g., 500 PKR off
}
enum CouponStatus {
ACTIVE
INACTIVE
ARCHIVED
}
enum DiscountScope {
ORDER // discount applies to the whole order
ITEM // discount applies only to eligible items
}
